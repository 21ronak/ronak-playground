import React, { useCallback, useState } from "react";
import "./App.css";

// -- Part 1: Form Schema Definition --
// A flexible form schema interface where each field can include a name, label, type,
// and a validations object for various rules (required, pattern, min, etc.)
const formSchema = [
  {
    name: "firstName",
    label: "First Name",
    type: "text",
    validations: {
      required: true,
    },
  },
  {
    name: "email",
    label: "Email",
    type: "email",
    validations: {
      required: true,
      pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
      errorMessage: "Please enter a valid email address",
    },
  },
  {
    name: "age",
    label: "Age",
    type: "number",
    validations: {
      required: false,
      min: 0,
      errorMessage: "Age must be at least 0",
    },
  },
  // Additional fields and validation rules can be added here
];

// -- Part 2: Building the Form Component --
const CustomForm = ({ formSchema, onSubmit }) => {
  // Create an initial state from the form schema (one property per field)
  const initialValues = formSchema.reduce((acc, field) => {
    acc[field.name] = "";
    return acc;
  }, {});

  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});

  // Validate a single field based on its validations
  const validateField = (name, value, validations) => {
    if (validations) {
      if (validations.required && !value) {
        return "This field is required";
      }
      if (validations.pattern && !validations.pattern.test(value)) {
        return validations.errorMessage || "Invalid format";
      }
      if (validations.min !== undefined && Number(value) < validations.min) {
        return validations.errorMessage || `Minimum value is ${validations.min}`;
      }
      // Additional validations can be added here
    }
    return "";
  };

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setValues((prev) => ({ ...prev, [name]: value }));

    // Validate field on change
    const fieldSchema = formSchema.find((field) => field.name === name);
    const error = validateField(name, value, fieldSchema.validations);
    setErrors((prev) => ({ ...prev, [name]: error }));
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    let formIsValid = true;
    const newErrors = {};

    // Validate all fields in the form
    formSchema.forEach((field) => {
      const error = validateField(field.name, values[field.name], field.validations);
      if (error) {
        formIsValid = false;
        newErrors[field.name] = error;
      }
    });
    setErrors(newErrors);

    if (formIsValid) {
      onSubmit(values);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {formSchema.map((field) => (
        <div key={field.name} className="form-field">
          <label htmlFor={field.name}>{field.label}</label>
          <input
            id={field.name}
            name={field.name}
            type={field.type}
            value={values[field.name]}
            onChange={handleChange}
          />
          {errors[field.name] && <div className="error">{errors[field.name]}</div>}
        </div>
      ))}
      <button type="submit">Submit</button>
    </form>
  );
};

const App = () => {
  // onSubmit callback to process form data (e.g., sending data to an API)
  const onSubmit = useCallback((data) => {
    console.log("Form submitted with data:", data);
    // Further processing can be done here
  }, []);

  return (
    <div className="page-container">
      <div className="main-container">
        <div className="form-container">
          <CustomForm formSchema={formSchema} onSubmit={onSubmit} />
        </div>
      </div>
    </div>
  );
};

export default App;
